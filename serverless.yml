# serverless.yml

service: serverless-flask

plugins:
  - serverless-python-requirements
  - serverless-wsgi

custom:
  wsgi:
    app: app.app
    packRequirements: false
  pythonRequirements:
    dockerizePip: non-linux

provider:
  name: aws
  runtime: python3.6
  stage: dev
  region: us-east-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - 's3:*'
        - 's3:ListBucket'
        - 's3:GetBucket'
        - 's3:GetBucketLocation'
        - 'dynamodb:Query'
        - 'SQS:*'
      Resource: 
        - 'arn:aws:s3:::s3-bucket-cs493'
        - 'arn:aws:s3:::s3-bucket-cs493/*'
        - 'arn:aws:dynamodb:us-west-2:621940852840:table/music'
        - 'arn:aws:sqs:us-east-1:621940852840:pubsubqueue'
        
functions:
  app:
    handler: wsgi_handler.handler
    events:
      - http:
          method: ANY
          path: /{proxy+}
          cors: true
          authorizer:
            name: auth
            type: request
            identitySource: 'method.request.header.authorization'

  pubsubLambda:
    handler: handler.pubsubLambda
    events:
      - sqs: 'arn:aws:sqs:us-east-1:621940852840:pubsubqueue'

  auth:
    handler: auth.handler

resources:
  Resources:
    GatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: EXPIRED_TOKEN
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
    AuthFailureGatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'


